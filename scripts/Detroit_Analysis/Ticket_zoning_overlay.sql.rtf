{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red128\green128\blue128;}
{\*\expandedcolortbl;;\csgenericrgb\c50196\c50196\c50196;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\ri0\sl259\slmult1\sa160\partightenfactor0

\f0\fs22 \cf2 ##This script overlays the tickets with the parcels, and based on the overlay calculates the ##following per ticket polygon: Unique zoning codes, frequency of zoning codes, predominant ##zoning code, and area overlaid by each zoning code.  It runs in the Postgresql db version ##88b5ecb software with the PostGIS extension.   Written by Devika Kakkar, September, 2021.\
\pard\pardeftab720\ri0\sl259\slmult1\sa160\partightenfactor0
\cf0 \
\pard\pardeftab720\ri0\sl259\slmult1\sa160\partightenfactor0
\cf2 BEGIN\
###Uploading assessor_parcels\
\
shp2pgsql -s 4326 assessor_parcels.shp assessor_parcels| psql -h localhost -p  9836  -d postgres\
\
### Uploading ticket polygons\
shp2pgsql -s 4326 Ticket_Polygons.shp ticket_polygons | psql -h localhost -p 9836 -d postgres\
postgres=# Delete from assessor_parcels  where zoning IS NULL;\
#Create Index on Geom\
CREATE INDEX ticket_polygons_geom_idx ON ticket_polygons USING GIST (geom);\
postgres=# CREATE INDEX assessor_parcels_geom_idx ON assessor_parcels USING GIST (geom);\
\
1. A list of all zoning codes each ticket polygon intersects.\
postgres=# Create table list_zoning_codes_grby as (SELECT a.objectid_t  as ticket_objectid_t, b.zoning as parcel_zoning_code from ticket_polygons a, assessor_parcels b WHERE ST_Intersects(a.geom, b.geom) group by ticket_objectid_t ,parcel_zoning_code);\
\
Create table list_zoning_codes as (SELECT a.objectid_t as ticket_objectid_t, b.zoning as parcel_zoning_code from ticket_polygons a, assessor_parcels b WHERE ST_Intersects(a.geom, b.geom));\
\
2.  Predominant zoning code within each ticket polygon.\
Create table predominant_zoning_code as (with sub_query1 as(\
Select ticket_objectid_t, parcel_zoning_code, count(*) as count_zoning_code from list_zoning_codes group by ticket_objectid_t,parcel_zoning_code),\
sub_query2 as(\
select ticket_objectid_t, parcel_zoning_code,\
row_number() OVER(partition by ticket_objectid_t order by count_zoning_code desc) as rn\
from sub_query1\
)\
select ticket_objectid_t, parcel_zoning_code\
from sub_query2\
where rn = 1);\
\
3.Total Area occupied by each unique zoning code\'a0\
Create table temp_area as (SELECT a.objectid_t as ticket_objectid_t, b.zoning as parcel_zoning_code,  ST_Area(ST_Intersection(a.geom, b.geom)) as area_zoning_code from ticket_polygons a, assessor_parcels b WHERE ST_Intersects(a.geom, b.geom));\
Create table total_area_zoning_codes as (Select ticket_objectid_t, parcel_zoning_code, SUM(area_zoning_code) as total_area_zoning_code from temp_area group by ticket_objectid_t,parcel_zoning_code);\
4. Count of total unique zoning codes.\
postgres=# Create table count_unique_codes as (Select ticket_objectid_t, parcel_zoning_code, count(*) as count_zoning_code from list_zoning_codes group by ticket_objectid_t,parcel_zoning_code);\
\
END\
\
\pard\pardeftab720\ri0\sl259\slmult1\sa160\partightenfactor0
\cf0 \
}